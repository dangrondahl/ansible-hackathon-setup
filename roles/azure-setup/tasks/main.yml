---
# tasks file for azure-setup
  
- name: "Assert variables are defined"
  assert: 
    that: "{{ item }} is defined"
  loop: 
    - host_count
    - server_count

- name: "Create {{ resourcegroup_name }} Resource Group"
  azure_rm_resourcegroup:
    name: "{{ resourcegroup_name }}"
    location: "{{ location }}"

- name: "Create {{virtualnetwork_name}} Virtual Network"
  azure_rm_virtualnetwork:
    resource_group: "{{ resourcegroup_name }}"
    name: "{{ virtualnetwork_name }}"
    address_prefixes: "10.0.0.0/16"

- name: "Create {{subnet_name}} Subnet in {{virtualnetwork_name}}"
  azure_rm_subnet:
    resource_group: "{{ resourcegroup_name }}"
    name: "{{ subnet_name }}"
    address_prefix: "10.0.1.0/24"
    virtual_network: "{{ virtualnetwork_name }}"

- name: "Create {{securitygroup_name}} security rules"
  azure_rm_securitygroup:
    resource_group: "{{ resourcegroup_name }}"
    name: "{{ securitygroup_name }}"
    rules:
      - name: SSH
        source_address_prefix: "{{ source_address_prefix }}"
        protocol: Tcp
        destination_port_range: 22
        access: Allow
        priority: 1001
        direction: Inbound
      - name: RDP
        source_address_prefix: "{{ source_address_prefix }}"
        destination_port_range: 3389
        access: Allow
        priority: 1002
        direction: Inbound

- name: Create public IP address for each host
  azure_rm_publicipaddress:
    resource_group: "{{ resourcegroup_name }}"
    allocation_method: Static
    name: "{{ item }}_ip"
  with_sequence: "count={{ host_count }} format={{ host_vm_prefix }}%02d"
  register: host_ips
  async: 45
  poll: 0

- name: Wait for host IP creations to complete
  async_status: "jid={{ item.ansible_job_id }}"
  register: host_ip_jobs
  until: host_ip_jobs.finished
  retries: 300
  with_items: "{{ host_ips.results }}"

- name: Create public IP address for each server
  azure_rm_publicipaddress:
    resource_group: "{{ resourcegroup_name }}"
    allocation_method: Static
    name: "{{ item }}_ip"
  with_sequence: "count={{ server_count }} format={{ server_vm_prefix }}%02d"
  register: server_ips
  async: 45
  poll: 0
  
- name: Wait for server IP creations to complete
  async_status: "jid={{ item.ansible_job_id }}"
  register: server_ip_jobs
  until: server_ip_jobs.finished
  retries: 300
  with_items: "{{ server_ips.results }}"

- name: Create a network interface for each host VM
  azure_rm_networkinterface:
    resource_group: "{{ resourcegroup_name }}"
    name: "{{ item }}_nic"
    virtual_network: "{{ virtualnetwork_name }}"
    subnet: "{{ subnet_name }}"
    security_group: "{{ securitygroup_name }}"
    ip_configurations:
      - name: "ipconfig"
        public_ip_address_name: "{{item}}_ip"
        primary: True
  with_sequence: "count={{ host_count }} format={{ host_vm_prefix }}%02d"
  register: host_nics
  async: 45
  poll: 0

- name: Wait for host NIC creations to complete
  async_status: "jid={{ item.ansible_job_id }}"
  register: host_nic_jobs
  until: host_nic_jobs.finished
  retries: 300
  with_items: "{{ host_nics.results }}"

- name: Create a network interface for each server VM
  azure_rm_networkinterface:
    resource_group: "{{ resourcegroup_name }}"
    name: "{{ item }}_nic"
    virtual_network: "{{ virtualnetwork_name }}"
    subnet: "{{ subnet_name }}"
    security_group: "{{ securitygroup_name }}"
    ip_configurations:
      - name: "ipconfig"
        public_ip_address_name: "{{item}}_ip"
        primary: True
  with_sequence: "count={{ server_count }} format={{ server_vm_prefix }}%02d"
  register: server_nics
  async: 45
  poll: 0

- name: Wait for server NIC creations to complete
  async_status: "jid={{ item.ansible_job_id }}"
  register: server_nic_jobs
  until: server_nic_jobs.finished
  retries: 300
  with_items: "{{ server_nics.results }}"

- name: Create host VMs
  azure_rm_virtualmachine:
    resource_group: "{{ resourcegroup_name }}"
    name: "{{ item }}-vm"
    vm_size: Standard_B1ms
    admin_username: "{{ host_admin }}"
    admin_password: "{{ host_admin_password }}"
    network_interfaces: "{{ item }}_nic"
    image:
      offer: UbuntuServer
      publisher: Canonical
      sku: 18.04-LTS
      version: latest
  with_sequence: "count={{ host_count }} format={{ host_vm_prefix }}%02d"
  register: host_instances
  async: 7200
  poll: 0

- name: Wait for host VM creations to complete
  async_status: "jid={{ item.ansible_job_id }}"
  register: host_jobs
  until: host_jobs.finished
  retries: 300
  with_items: "{{ host_instances.results }}"

- name: Create server VMs
  azure_rm_virtualmachine:
    resource_group: "{{ resourcegroup_name }}"
    name: "{{ item }}-vm"
    vm_size: Standard_B1ms
    admin_username: '{{ server_admin }}'
    admin_password: "{{ server_admin_password }}"
    os_type: Windows
    network_interfaces: "{{ item }}_nic"
    image:
      offer: WindowsServer
      publisher: MicrosoftWindowsServer
      sku: 2016-Datacenter
      version: latest
    state: present
  with_sequence: "count={{ server_count }} format={{ server_vm_prefix }}%02d"
  register: server_instances
  async: 7200
  poll: 0

- name: Wait for server VM creations to complete
  async_status: "jid={{ item.ansible_job_id }}"
  register: server_jobs
  until: server_jobs.finished
  retries: 300
  with_items: "{{ server_instances.results }}"

- name: Configure servers to be accessible via Ansible by enabling WinRM
  azure_rm_virtualmachine_extension:
    name: winrm-extension
    resource_group: "{{ resourcegroup_name }}"
    virtual_machine_name: "{{ item }}-vm"
    publisher: Microsoft.Compute
    virtual_machine_extension_type: CustomScriptExtension
    type_handler_version: 1.9
    settings: '{"commandToExecute": "powershell.exe -ExecutionPolicy ByPass -EncodedCommand {{winrm_enable_script}}"}'
    auto_upgrade_minor_version: true
  with_sequence: "count={{ server_count }} format={{ server_vm_prefix }}%02d"
  register: winrm_instances
  async: 7200
  poll: 0

- name: Wait for winrm creations to complete
  async_status: "jid={{ item.ansible_job_id }}"
  register: server_jobs
  until: server_jobs.finished
  retries: 300
  with_items: "{{ server_instances.results }}"              